@page "/competitions"
@using PROJECT_ES.Data
@using PROJECT_ES.Service
@using PROJECT_ES.Pages
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject CompetitionRepository competitionRepository



        <!-- =================== START OF RECENT ORDER =================== -->
                <div class="recent-orders">
                    <h1>Competitions <a href="/createcompetition" class="btn btn-primary">Add Competition</a></h1>
                    <div class="form-group">
                        <input style="border-radius: 20px;" class="form-control col-md-4" @bind-value="searchTerm" @bind-value:event="oninput" list="datalistOptions" id="exampleDataList" placeholder="Search Competition">
                    </div>
                    @if (competitions == null)
                        {
                            <p><em>Loading...</em></p>
                        }else{
                  <table>
                    <thead>
                      <tr>
                          <th>Nome</th>
                          
                          <th>Começa</th>
                          <th>Encerra</th>
                          <th>Publica</th>
                          <th>Ações</th>
                          
                          
                      </tr>
                    </thead>
                    <tbody>
                                @foreach (var competition in competitions)
                                {
                                    <tr>
                                        <td>@competition.Name</td>
                                        
                                        <td>@competition.data_inicio</td>
                                        <td>@competition.data_fim</td>
                                        <td>
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" @bind="competition.Ispublic" @onclick="() => UpdateIsPublic(competition)">
                                            </div>
                                        </td>
                                        <td>
                                            <a @onclick="() => ViewDetails(competition.Id)">
                                                <span @onclick="() => ViewDetails(competition.Id)"><i class="fa fa-eye"></i></span>
                                                aaaaaa
                                            </a>

                                            <a @onclick="() => EditCompetition(competition.Id)">
                                                <span @onclick="() => EditCompetition(competition.Id)"><i class="fa fa-edit"></i></span>
                                            </a>

                                            <a @onclick="() => DeleteMovie(competition.Id)">
                                                <span @onclick="() => DeleteMovie(competition.Id)"><i class="fa fa-trash"></i></span>
                                            </a>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                  </table>
                        }
                </div>
                <!-- =================== END OF RECENT ORDER =================== -->


@code {
    private string searchTerm = "";


    private IEnumerable<PROJECT_ES.Data.Competition> competitions;

    protected override async Task OnInitializedAsync()
    {
        var allCompetitions = await competitionRepository.GetCompetitionsAsync();
        competitions = allCompetitions.Where(c => c.Name.ToLower().Contains(searchTerm.ToLower()));
    }



    private async Task OnSearch()
    {
        var allCompetitions = await competitionRepository.GetCompetitionsAsync();
        competitions = allCompetitions.Where(c => c.Name.ToLower().Contains(searchTerm.ToLower()));
    }


    private async Task ViewDetails(int id)
    {
        var competition = await competitionRepository.ViewDetails(id);

        NavigationManager.NavigateTo($"competitiondetails/{id}");
    }
    private async Task EditCompetition(int id)
    {
        var competition = await competitionRepository.ViewDetails(id);
    
    // Redireciona o usuário para a página de criação de competições, passando o ID da competição a ser editada como parâmetro.
        NavigationManager.NavigateTo($"/editcompetition?id={id}");
    }

    private async Task DeleteMovie(int id)
    {
        await competitionRepository.DeleteCompetitionAsync(id);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);

    }
    
    private async Task UpdateIsPublic(Competition competition)
    {
        competition.Ispublic = !competition.Ispublic;
        await competitionRepository.UpdateCompetitionAsync(competition);
    }
}

