@page "/movies"
@using System.Linq
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Configuration
@using PROJECT_ES.Service
@using PROJECT_ES.Data
@inject HttpClient httpClient
@inject MovieRepository movieRepository
@inject NavigationManager NavigationManager

<div class="recent-orders">
    <h1>Filmes</h1>
    <br/>
    <div class="wrapper">
        <form @onsubmit="SearchMovies" style="display: flex;
                                                      align-items: center;">
            <input placeholder="Insere filme a adicionar" class="form-control" id="imdbId" @bind="imdbname" required/>
            <button type="submit">
                🔍
            </button>
        </form>
        
    </div>
    <span style="color: red;font-size: 18px; padding-bottom: 30px">@statusMessage</span>

    <br/><br/>

        @if (Movies != null){
            <div class="wrapper-grid">
                @foreach (var movie in Movies)
                {
                    <div class="container-banner-movie">
                        <img class="banner-img" @onclick="() => AddMovieAsync(movie)" style="padding-bottom: 10px" src='@movie.Poster'>
                        <div class="caption">@movie.Title</div>
                    </div>
                }
            </div>

            }
    

     @if (movies == null)
                        {
                        <p><em>Loading...</em></p>
                        }
                        else if (!movies.Any())
                        {
                        <p><em>No movies found.</em></p>
                        }
                        else
                        {
                  <table>
                    <thead>
                      <tr>
                        <th>Título</th>
                        <th>Descrição</th>
                        <th>Diretore(s)</th>
                        <th>Ator(es)</th>
                        <th>Género</th>
                        <th>Roteiristas</th>
                        <th>Banner</th>
                        <th>Lançamento</th>
                      </tr>
                    </thead>
                    <tbody>
                    @foreach (var movie in movies)
                    {
                                    <tr>
                                        <td>@movie.Title</td>
                                        <td>@movie.Description</td>
                                        <td>@movie.Diretor</td>
                                        <td>@movie.Actor</td>
                                        <td>@movie.Genre</td>
                                        <td>@movie.Writers</td>
                                        <td><img src="@movie.Image" width="50" height="70" /></td>
                                        <td>@movie.Date</td>
                                    </tr>
                                }
                                </tbody>
                  </table>
                        }
                </div>
                <!-- =================== END OF RECENT ORDER =================== -->


@code {
    private IEnumerable<Movie> movies;

    [Inject]
    private IConfiguration configuration { get; set; }
    
    
    protected override async Task OnInitializedAsync()
    {
        movies = await movieRepository.GetMoviesAsync();
    }
    

    private async Task DeleteMovie(int id)
    {
        await movieRepository.DeleteMovieAsync(id);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
        
    }

    private void RefreshPage()
    {
        NavigationManager.NavigateTo("/movies");
    }
    
    
    private string imdbId;
    private string statusMessage;
 ////////////////////////////////////
    private List<OmdbMovie> Movies { get; set; }

    private string imdbname;

    private async Task SearchMovies()
    {
        var omdbResponse = await httpClient.GetFromJsonAsync<OmdbResponse>($"https://www.omdbapi.com/?s={imdbname}&apikey=f22543c5");

        if (omdbResponse?.Response == "True")
        {
            Movies = omdbResponse.Search;
        }
        else        {
            statusMessage = "Titulo de filme não encontrado pala API.";
        }
    }
    
    public class OmdbResponse
    {
        public string Response { get; set; }
        public List<OmdbMovie> Search { get; set; }
    // Outras propriedades relevantes da resposta da API
    }

    public class OmdbMovie
    {
        public string imdbID { get; set; }
        public string Title { get; set; }
        public string Plot { get; set; }
        public string Director { get; set; }
        public string Actors { get; set; }
        public string Genre { get; set; }
        public string Writer { get; set; }
        public string Poster { get; set; }
        public string Year { get; set; }
        public string Runtime { get; set; }
        public string Country { get; set; }
        public string imdbRating { get; set; }
        
    }
    
    //////////////////////////////
    private async Task AddMovieAsync(OmdbMovie omdbMovie)
    {
        var movieExist = await movieRepository.GetMovieAsync(omdbMovie.Title);

        if (movieExist == null)
        {
            var omdbMovieDetails = await httpClient.GetFromJsonAsync<OmdbMovie>($"https://www.omdbapi.com/?i={omdbMovie.imdbID}&apikey=f22543c5");

            if (omdbMovieDetails != null)
            {
                var movie = new Movie
                {
                    Title = omdbMovieDetails.Title,
                    Description = omdbMovieDetails.Plot ?? "No description available",
                    Diretor = omdbMovieDetails.Director ?? "No directors available",
                    Actor = omdbMovieDetails.Actors ?? "No actors available",
                    Genre = omdbMovieDetails.Genre ?? "No genre available",
                    Writers = omdbMovieDetails.Writer ?? "No writers available",
                    Image = omdbMovieDetails.Poster,
                    Date = omdbMovieDetails.Year,
                    Duration = omdbMovieDetails.Runtime,
                    Country = omdbMovieDetails.Country,
                    Rating = omdbMovieDetails.imdbRating
                };

                await movieRepository.AddMovieAsync(movie);
                NavigationManager.NavigateTo(NavigationManager.Uri, true);
                
            }
            else
            {
                //meter amanha mensam de ero
            }
        }
        else
        {
          
        }

        StateHasChanged();
    }
    
}

<style>
        .movie-img {
            transition: opacity 0.3s ease;
        }
    
        .movie-img:hover {
            opacity: 0.7;
        }
</style>