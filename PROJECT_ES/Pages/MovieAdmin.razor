@page "/movies"
@using System.Linq

@using System.Net.Http.Json
@using System.Threading.Tasks
@using PROJECT_ES.Shared
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Configuration
@using PROJECT_ES.Service
@using System.Net.Http
@using PROJECT_ES.Data
@using System.Diagnostics
@inject HttpClient httpClient
@inject MovieRepository movieRepository
@inject NavigationManager NavigationManager
<!doctype html>
<html class="no-js" lang="en">
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>
<body>
<div class="container">
<h1>Movies</h1>

    <div class="row">
        <div class="col-md-4">
            <form @onsubmit="AddMovieAsync">
                <div class="form-group">
                    <label for="imdbId">Name of Movies</label>
                    <input style="border-radius: 20px;" type="text" class="form-control" id="imdbId" @bind="imdbId" required />
                    <div style="color: red">@statusMessage</div>
                </div>
                <br>
                <div>
                    <button type="submit" class="btn btn-primary">Add</button>
                
                </div>
            </form>
            <br>
        </div>
    </div>
    
    @if (movies == null)
{
    <p><em>Loading...</em></p>
}
else if (!movies.Any())
{
    <p><em>No movies found.</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Director</th>
            <th>Actor</th>
            <th>Genre</th>
            <th>Writers</th>
            <th>Image</th>
            <th>Date</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var movie in movies)
        {
            <tr>
                <td>@movie.Title</td>
                <td>@movie.Description</td>
                <td>@movie.Diretor</td>
                <td>@movie.Actor</td>
                <td>@movie.Genre</td>
                <td>@movie.Writers</td>
                <td><img src="@movie.Image" width="50" height="70" /></td>
                <td>@movie.Date</td>
                <td>
                    <a @onclick="() => DeleteMovie(movie.Id)"> <i class="fa fa-trash"></i></a>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
</div>
</body>
</html>
@code {
    private IEnumerable<Movie> movies;

    [Inject]
    private IConfiguration configuration { get; set; }
    
    
    protected override async Task OnInitializedAsync()
    {
        movies = await movieRepository.GetMoviesAsync();
    }
    

    private async Task DeleteMovie(int id)
    {
        await movieRepository.DeleteMovieAsync(id);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
        
    }

    private void RefreshPage()
    {
        NavigationManager.NavigateTo("/movies");
    }
    
    
        <!-- ADD MOVIE -->
    private string imdbId;
    private string statusMessage;


    private async Task AddMovieAsync()
    {
        var omdbMovie = await httpClient.GetFromJsonAsync<OmdbMovie>($"https://www.omdbapi.com/?t={imdbId}&apikey=f22543c5");
        var Responde = omdbMovie.Response;
        
        var movieExist = await movieRepository.GetMovieAsync(omdbMovie.Title);
        
        if (Responde == "True" && movieExist==null)
        {
            var movie = new Movie
            {
                Title = omdbMovie.Title,
                Description = omdbMovie.Plot,
                Diretor = omdbMovie.Director,
                Actor = omdbMovie.Actors,
                Genre = omdbMovie.Genre,
                Writers = omdbMovie.Writer,
                Image = omdbMovie.Poster,
                Date = omdbMovie.Year,

            };
            await movieRepository.AddMovieAsync(movie);
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
        else
        {
            statusMessage = "Movie not found or already exists.";
        }
        

        StateHasChanged();
    }
    
}