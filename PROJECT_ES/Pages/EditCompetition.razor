@page "/editcompetition"
@using PROJECT_ES.Data
@using PROJECT_ES.Service
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject CompetitionDetailsRepository CompetitionDetailsRepository
@inject CompetitionRepository competitionRepository

<div class="recent-orders">
    <h1>Editar competição</h1><br/>
    
@if (competition != null && competition.Id != null)
{
    <EditForm Model="@competition" OnValidSubmit="SaveChanges">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label for="name">Nome:</label>
            <input type="text" class="form-control" @bind="@competition.Name"/>
        </div><br/>

        <div class="form-group">
            <label for="description">Descrição:</label>
            <input type="text" id="description" class="form-control" @bind="competition.Description"/>
        </div><br/>

        <div class="form-group">
            <label for="name">Começa:</label>
            <input type="datetime" id="data_inicio" class="form-control" @bind="competition.data_inicio"/>
        </div><br/>
        <div class="form-group">
            <label for="name">Encerra:</label>
            <input type="datetime" id="data_inicio" class="form-control" @bind="competition.data_fim"/>
        </div><br/>
        <div class="form-group">
            <label for="name">Pública</label>
            <div class="form-check form-switch">
                                  <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" @bind="competition.Ispublic">
                                </div>
        </div>

        <button type="submit" class="btn btn-primary">Editar</button>
    </EditForm>
}
else
{
    <p><em>Loading...</em></p>
}
</div>
@code {
    [Parameter]
    public int id { get; set; }
    
    private bool showEditModal = false;
    
    private Competition competition;

    private IEnumerable<PROJECT_ES.Data.Competition> Details;

    protected override async Task OnInitializedAsync()
    {
        if (id == 0 && int.TryParse(NavigationManager.Uri.Split("?id=")[1], out int competitionId))
        {
            id = competitionId;
        }
        await LoadDataAsync();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await LoadDataAsync();
    }
    
    private async Task LoadDataAsync()
    {
        Details = await CompetitionDetailsRepository.GetAllDetailsAsync(id);
        
        // Atualiza a propriedade 'competition' com os valores retornados pela lista 'Details'
        competition = Details.FirstOrDefault();
    }
    
    private async Task SaveChanges()
    {
        var competitionToUpdate = Details.FirstOrDefault();

        if (competitionToUpdate != null)
        {
            competitionToUpdate.Name = competition.Name;
            competitionToUpdate.Description = competition.Description;
            competitionToUpdate.data_inicio = competition.data_inicio;
            competitionToUpdate.data_fim = competition.data_fim;

            await competitionRepository.EditCompetition(competitionToUpdate.Id, competitionToUpdate);
            NavigationManager.NavigateTo("/competitions");
        }
    }

}
